#+title: Underline with a char

* License

Copyright (c) Marco Wahl 2017

GPL 3

* About
:PROPERTIES:
:ID:       d1310a31-62ff-452f-b07b-312a17bf85b0
:END:

[[https://travis-ci.org/marcowahl/underline-with-char.svg?branch=master]]

This program supports underlining with a certain character.

When point is in an empty line then fill the line with a character
making it as long as the line above.

This program provides just command =underline-with-char=.

** Examples

Notation:
- <!> means the cursor.
- RET means the return key.

*** Full underlining

**** Input

#+begin_src text
lala
<!>
#+end_src

**** Action

M-x underline-with-char RET

**** Output

#+begin_src text
lala
----<!>
#+end_src

*** Partial underlining

**** Input

#+begin_src text
lolololo
//<!>
#+end_src

**** Action

M-x underline-with-char RET

**** Output

#+begin_src text
lolololo
//------<!>
#+end_src

*** Use a certain char for current and subsequent underlinings (1)

**** Input

#+begin_src text
lala
<!>
#+end_src

**** Action

C-u M-x underline-with-char X RET

**** Output

#+begin_src text
lala
XXXX<!>
#+end_src

*** Use a certain char for current and subsequent underlinings (2)

**** Input

#+begin_src text
lala
<!>
#+end_src

**** Action

C-u M-x underline-with-char X RET RET M-x underline-with-char RET

**** Output

#+begin_src text
lala
XXXX
XXXX<!>
#+end_src

** Version

#+name: version
#+begin_src txt
3.0.0
#+end_src

* Install

Load the elisp file.

* Build

This is a literate program.  Generating the pure program is called
tangling.  Concretely tangle with C-cvt in Emacs Orgmode.

** For the very first stages

You might need to perform

#+begin_src shell
export CASK_EMACS=/usr/bin/emacs-25.2
cask init
cask install
cask exec ert-runner init
#+end_src

- [2017-06-21 Wed 12:14] tip version of Emacs did not work with cask install.

* Testing

** Unit tests
:PROPERTIES:
:ID:       c960a64f-5dc8-463d-b7b5-48f3c1ff2a3d
:header-args:emacs-lisp: :tangle test/underline-with-char-test.el
:END:

The tests are style ert-runner (which needs cask IIUC.)

Run tests e.g. like

[[elisp:(compile%20"CASK_EMACS=/usr/bin/emacs-25.2%20make%20test")][elisp:(compile "CASK_EMACS=/usr/bin/emacs-25.2 make test")]]

Hint: Possibly you need to perform [[elisp:(compile%20"CASK_EMACS=/usr/bin/emacs-25.2%20cask%20install")][elisp:(compile
"CASK_EMACS=/usr/bin/emacs-25.2 cask install")]] as precondition to be
able to run tests.

Recall cask does not work well with current Emacs tip version I use
normally.  This is the rationale for the setting CASK_EMACS to a
suitable version.

Get help with

#+begin_src shell
CASK_EMACS=/usr/bin/emacs-25.2 cask exec ert-runner help
#+end_src

- Note :: I think that the test file must end with "-test" with
          ert-runner default settings.

*** First line
:PROPERTIES:
:ID:       c3ab7721-53d9-4abe-a5e6-e031c4a9f5f1
:END:

#+begin_src emacs-lisp :padline no
;;; underline-with-char-test.el --- tests for underline-with-char.el  -*- lexical-binding: t ; eval: (view-mode 1) -*-
#+end_src

*** Concrete tests
:PROPERTIES:
:ID:       17c5897e-3413-4576-aa83-3869e0cb1053
:END:

#+begin_src emacs-lisp :comments both
(require 'underline-with-char)

(ert-deftest 146ef8c4c45a15619b234214db2a214a0b197285 ()

  (should
   (equal
    "lala
----"
    (with-temp-buffer
      (let ((underline-with-char-fill-char ?-))
       (insert "lala
")
       (call-interactively #'underline-with-char)
       (buffer-substring (point-min) (point-max)))))))

(ert-deftest 37c1ae9a5a52091dd4090e1ee371ab60805b0d2c ()
  (should
   (equal
    "lala
la--"
    (with-temp-buffer
      (let ((underline-with-char-fill-char ?-))
        (insert "lala
la")
        (call-interactively #'underline-with-char)
        (buffer-substring (point-min) (point-max)))))))
#+end_src

*** Last line
:PROPERTIES:
:ID:       d37f9d32-541b-4a08-815e-394d858586d6
:END:
#+begin_src emacs-lisp
;;; underline-with-char-test.el ends here
#+end_src

** Manual tests

*** Change the underline character

- In a new buffer do (insert "lala\n").
- Point shall be in the line below the text.
- Do M-x underline-with-char
- Expectation :: the line has been underlined with some character.
- Create a fresh line.
- Do C-u M-x underline-with-char
- Press X.
- Expectation :: the line has been underlined with character X.
- Create a fresh line.
- Do M-x underline-with-char
- Expectation :: the line has been underlined with character X.

* Code
:PROPERTIES:
:header-args:emacs-lisp: :tangle underline-with-char.el
:END:

** First line
:PROPERTIES:
:ID:       c3ab7721-53d9-4abe-a5e6-e031c4a9f5f1
:END:

#+begin_src emacs-lisp :padline no
;;; underline-with-char.el --- Underline with a char  -*- lexical-binding: t ; eval: (view-mode 1) -*-

;; THIS FILE HAS BEEN GENERATED.

#+end_src

** Program
:PROPERTIES:
:ID:       17c5897e-3413-4576-aa83-3869e0cb1053
:END:

#+begin_src emacs-lisp :comments both :noweb yes

;; THIS FILE HAS BEEN GENERATED.


;;
;; Version: <<version>>
;; Package-Requires: ((emacs "24"))
;; Keywords: convenience

;;; Commentary:
;;
;; This program supports underlining with a certain character.
;;
;; When point is in an empty line then fill the line with a character
;; making it as long as the line above.
;;
;; This program provides just command =underline-with-char=.
;;

;; Examples
;; ========
;;
;; Notation:
;; - <!> means the cursor.
;; - RET means the return key.
;;

;; Full underlining
;; ................
;;
;; Input
;; _____
;;
;; lala
;; <!>
;;
;; Action
;; ______
;;
;; M-x underline-with-char RET
;;
;; Output
;; ______
;;
;; lala
;; ----<!>
;;

;; Partial underlining
;; ...................
;;
;; Input
;; _____
;;
;; lolololo
;; //<!>
;;
;; Action
;; ______
;;
;; M-x underline-with-char RET
;;
;; Output
;; ______
;;
;; lolololo
;; //------<!>
;;

;; Use a certain char for current and subsequent underlinings (1)
;; ..............................................................
;;
;; Input
;; _____
;;
;; lala
;; <!>
;;
;; Action
;; ______
;;
;; C-u M-x underline-with-char X RET
;;
;; Output
;; ______
;;
;; lala
;; XXXX<!>
;;

;; Use a certain char for current and subsequent underlinings (2)
;; ..............................................................
;;
;; Input
;; _____
;;
;; lala
;; <!>
;;
;; Action
;; ______
;;
;; C-u M-x underline-with-char X RET RET M-x underline-with-char RET
;;
;; Output
;; ______
;;
;; lala
;; XXXX
;; XXXX<!>


;;; Code:


(defcustom underline-with-char-fill-char ?-
  "The character for the underline."
  :group 'underline-with-char
  :type 'character)


;;;###autoload
(defun underline-with-char (arg)
  "Underline the line above with a certain character.

Fill what's remaining if not at the first position.

The default character is `underline-with-char-fill-char'.

With prefix ARG use the next entered character for this and
subsequent underlining.

Example with `underline-with-char-fill-char' set to '-' and point
symbolized as <!> and starting with

;; Commentary:
;; <!>

get

;; Commentary:
;; -----------"
  (interactive "P")
  (when (equal '(4) arg)
    (setq underline-with-char-fill-char (read-char "char: ")))
  (insert
   (make-string
    (save-excursion
      (let ((col (current-column)))
        (forward-line -1)
        (end-of-line)
        (when (< col (current-column))
          (beginning-of-line)
          (forward-char col)))
      (let ((old-point (point)))
        (- (progn (end-of-line) (point)) old-point)))
        underline-with-char-fill-char)))


(provide 'underline-with-char)
#+end_src

** Last line
:PROPERTIES:
:ID:       d37f9d32-541b-4a08-815e-394d858586d6
:END:
#+begin_src emacs-lisp


;;; underline-with-char.el ends here
#+end_src

* Tasks

** TODO Automate the manual tests

** TODO Generate the in the elisp-file from the about section
