#+title: Underline with a char

* License

GPL 3

* About
:PROPERTIES:
:ID:       d1310a31-62ff-452f-b07b-312a17bf85b0
:END:

[[https://travis-ci.org/marcowahl/underline-with-char.svg?branch=master]]

When point is below a line then fill the line with a character making
it as long as the line above.

There might be corner cases that need exceptional handling.

*** Example

Notation: <!> marks point.

***** Full underlining

Input:

#+begin_verse
lala
<!>
#+end_verse

Action:

#+begin_verse
M-x underline-with-char
#+end_verse

Output:

#+begin_verse
lala
----<!>
#+end_verse

***** Partial underlining

Input:

#+begin_verse
;; lolo
;; <!>
#+end_verse

Action:

#+begin_verse
M-x underline-with-char
#+end_verse

Output:

#+begin_verse
;; lolo
;; ----<!>
#+end_verse

* Install

Load the elisp file in directory dist/.

* Build

This is a literate program.  Generating the pure program is called
tangling.  Concretely tangle with C-cvt in Emacs Orgmode.

*** For the very first stages

You might need to perform

#+begin_src shell
export CASK_EMACS=/usr/bin/emacs-25.2
cask init
cask install
cask exec ert-runner init
#+end_src

- [2017-06-21 Wed 12:14] tip version of Emacs did not work with cask install.
* Testing
:PROPERTIES:
:ID:       c960a64f-5dc8-463d-b7b5-48f3c1ff2a3d
:header-args:emacs-lisp: :tangle test/underline-with-char-test.el
:END:

The tests are style ert-runner (which needs cask IIUC.)

Run tests e.g. like

[[elisp:(compile "CASK_EMACS=/usr/bin/emacs-25.2 make test") ]] Recall
cask does not work well with current Emacs tip version I use normally.
This is the rationale for the setting CASK_EMACS to a suitable
version.

Get help with

#+begin_src shell
cask exec ert-runner help
#+end_src

- Note :: I think that the test file must end with "-test" with
          ert-runner default settings.

*** First line
:PROPERTIES:
:ID:       c3ab7721-53d9-4abe-a5e6-e031c4a9f5f1
:END:

#+begin_src emacs-lisp :padline no
;;; underline-with-char-test.el --- tests for underline-with-char.el  -*- lexical-binding: t ; eval: (view-mode 1) -*-
#+end_src

*** Concrete tests
:PROPERTIES:
:ID:       17c5897e-3413-4576-aa83-3869e0cb1053
:END:

#+begin_src emacs-lisp :comments both
(require 'underline-with-char)

(ert-deftest f2149b5d7e74f04715435e3767bb5b28eb973ab6 ()
  (should
   (equal
    "lala
----"
    (with-temp-buffer
      (insert "lala
")
      (call-interactively #'underline-with-char)
      (buffer-substring (point-min) (point-max))))))

(ert-deftest 1cf806ca781aba4a68e248c4a3c5a0bd3017ea75 ()
  (should
   (equal
    "lala
la--"
    (with-temp-buffer
      (insert "lala
la")
      (call-interactively #'underline-with-char)
      (buffer-substring (point-min) (point-max))))))

(ert-deftest 88bded2c526dcf44116420e7a33eb7ab58b905ee ()
  (should
   (string=
    "a
a"
    (with-temp-buffer
      (let ((underline-with-char-fill-char ?a))
        (insert "a
")
        (call-interactively #'underline-with-char))
        (buffer-substring (point-min) (point-max))))))

(ert-deftest f3c73d8e5d16ed6dc6855c7fe36160ba030c9f91 ()
  (should
   (equal
    "lala
    "
    (with-temp-buffer
      (insert "lala
")
      (call-interactively #'underline-with-char-space)
      (buffer-substring (point-min) (point-max))))))
#+end_src

*** Last line
:PROPERTIES:
:ID:       d37f9d32-541b-4a08-815e-394d858586d6
:END:
#+begin_src emacs-lisp
;;; underline-with-char-test.el ends here
#+end_src

* Code
:PROPERTIES:
:header-args:emacs-lisp: :tangle underline-with-char.el
:END:

*** First line
:PROPERTIES:
:ID:       c3ab7721-53d9-4abe-a5e6-e031c4a9f5f1
:END:

#+begin_src emacs-lisp :padline no
;;; underline-with-char.el --- Underline with a char  -*- lexical-binding: t ; eval: (view-mode 1) -*-

;; THIS FILE HAS BEEN GENERATED.

#+end_src

*** Program
:PROPERTIES:
:ID:       17c5897e-3413-4576-aa83-3869e0cb1053
:END:

#+begin_src emacs-lisp :comments both

;; THIS FILE HAS BEEN GENERATED.


;;; Commentary:

;; Version: 1.0.0

;; E.g. with `underline-with-char-fill-char' set to '-' and point
;; symbolized as <!> and starting with
;;
;; ;; Commentary:
;; ;; <!>
;;
;; M-x underline-with-char yields
;;
;; ;; Commentary:
;; ;; -----------
;;


;;; Code:


(defcustom underline-with-char-fill-char ?-
  "The character for the underline."
  :group 'underline-with-char
  :type 'character)


(defun underline-with-char ()
  "Underline the line above with a certain character.

The character is defined by `underline-with-char-fill-char'.

Fill what's remaining if not at the first position.

E.g. with `underline-with-char-fill-char' set to '-' and point
symbolized as <!> and starting with

;; Commentary:
;; <!>

get

;; Commentary:
;; -----------
"
  (interactive)
  (insert
   (make-string
    (save-excursion
      (let ((col (current-column)))
        (forward-line -1)
        (end-of-line)
        (when (< col (current-column))
          (beginning-of-line)
          (forward-char col)))
      (let ((old-point (point)))
        (- (progn (end-of-line) (point)) old-point)))
    underline-with-char-fill-char)))

(defun underline-with-char-space ()
  "Underline the line above with a spaces."
  (interactive)
  (let ((underline-with-char-fill-char ? ))
    (underline-with-char)))


(provide 'underline-with-char)
#+end_src

*** Last line
:PROPERTIES:
:ID:       d37f9d32-541b-4a08-815e-394d858586d6
:END:
#+begin_src emacs-lisp


;;; underline-with-char.el ends here
#+end_src
