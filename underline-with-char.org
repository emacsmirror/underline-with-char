#+title: Underline with a char

* License

Copyright (c) Marco Wahl 2017

GPL 3

* About
:PROPERTIES:
:ID:       d1310a31-62ff-452f-b07b-312a17bf85b0
:END:

[[https://travis-ci.org/marcowahl/underline-with-char.svg?branch=master]]

When point is in an empty line then fill the line with a character
making it as long as the line above.

This program provides just command =underline-with-char=.

*** Example

Let <!> be the location of the Emacs cursor aka point.

#+begin_src text
;; Worthy to be underlined
;; <!>
#+end_src

then =M-x underline-with-char -=

yields

#+begin_src text
;; Worthy to be underlined
;; -----------------------
#+end_src

* Install

Load the elisp file.

* Build

This is a literate program.  Generating the pure program is called
tangling.  Concretely tangle with C-cvt in Emacs Orgmode.

*** For the very first stages

You might need to perform

#+begin_src shell
export CASK_EMACS=/usr/bin/emacs-25.2
cask init
cask install
cask exec ert-runner init
#+end_src

- [2017-06-21 Wed 12:14] tip version of Emacs did not work with cask install.
* Testing
:PROPERTIES:
:ID:       c960a64f-5dc8-463d-b7b5-48f3c1ff2a3d
:header-args:emacs-lisp: :tangle test/underline-with-char-test.el
:END:

The tests are style ert-runner (which needs cask IIUC.)

Run tests e.g. like

[[elisp:(compile%20"CASK_EMACS=/usr/bin/emacs-25.2%20make%20test")][elisp:(compile "CASK_EMACS=/usr/bin/emacs-25.2 make test")]]

Hint: Possibly you need to perform [[elisp:(compile%20"CASK_EMACS=/usr/bin/emacs-25.2%20cask%20install")][elisp:(compile
"CASK_EMACS=/usr/bin/emacs-25.2 cask install")]] as precondition to be
able to run tests.

Recall cask does not work well with current Emacs tip version I use
normally.  This is the rationale for the setting CASK_EMACS to a
suitable version.

Get help with

#+begin_src shell
CASK_EMACS=/usr/bin/emacs-25.2 cask exec ert-runner help
#+end_src

- Note :: I think that the test file must end with "-test" with
          ert-runner default settings.

*** First line
:PROPERTIES:
:ID:       c3ab7721-53d9-4abe-a5e6-e031c4a9f5f1
:END:

#+begin_src emacs-lisp :padline no
;;; underline-with-char-test.el --- tests for underline-with-char.el  -*- lexical-binding: t ; eval: (view-mode 1) -*-
#+end_src

*** Concrete tests
:PROPERTIES:
:ID:       17c5897e-3413-4576-aa83-3869e0cb1053
:END:

#+begin_src emacs-lisp :comments both
(require 'underline-with-char)

(ert-deftest 88bded2c526dcf44116420e7a33eb7ab58b905ee ()
  (should
   (string=
    "a
-"
    (with-temp-buffer
      (insert "a
")
        (underline-with-char ?-)
        (buffer-substring (point-min) (point-max))))))

(ert-deftest 1cf806ca781aba4a68e248c4a3c5a0bd3017ea75 ()
  (should
   (equal
    "lala
la--"
    (with-temp-buffer
      (insert "lala
la")
        (underline-with-char ?-)
        (buffer-substring (point-min) (point-max))))))

(ert-deftest eb74280b23db3a9ac18032d641aa280a6cb2c4c1 ()
  (should
   (equal
    "lala
    "
    (with-temp-buffer
      (insert "lala
")
      (underline-with-char ? )
      (buffer-substring (point-min) (point-max))))))

(ert-deftest 69756cd95b0b4ad224f728d57799253664e1c79c ()
  (should
   (equal
    "lala
++++
++--"
    (with-temp-buffer
      (insert "lala
")
      (underline-with-char ?+)
      (insert "\n++")
      (underline-with-char ?-)
      (buffer-substring (point-min) (point-max))))))
#+end_src

*** Last line
:PROPERTIES:
:ID:       d37f9d32-541b-4a08-815e-394d858586d6
:END:
#+begin_src emacs-lisp
;;; underline-with-char-test.el ends here
#+end_src

* Code
:PROPERTIES:
:header-args:emacs-lisp: :tangle underline-with-char.el
:END:

*** First line
:PROPERTIES:
:ID:       c3ab7721-53d9-4abe-a5e6-e031c4a9f5f1
:END:

#+begin_src emacs-lisp :padline no
;;; underline-with-char.el --- Underline with a char  -*- lexical-binding: t ; eval: (view-mode 1) -*-

;; THIS FILE HAS BEEN GENERATED.

#+end_src

*** Program
:PROPERTIES:
:ID:       17c5897e-3413-4576-aa83-3869e0cb1053
:END:

#+begin_src emacs-lisp :comments both

;; THIS FILE HAS BEEN GENERATED.


;;; Commentary:

;; Version: 1.0.0
;; Package-Requires: ((emacs "24"))
;; Keywords: convenience

;; This program provides just command `underline-with-char'.

;; Example:
;;
;; Let <!> be the location of the Emacs cursor aka point.
;;
;; ;; Worthy to be underlined
;; ;; <!>
;;
;; then
;;
;; M-x underline-with-char -
;;
;; yields
;;
;; ;; Worthy to be underlined
;; ;; -----------------------


;;; Code:


;;;###autoload
(defun underline-with-char (char)
  "Underline the line above with a certain character."
  (interactive  "cchar: ")
  (insert
   (make-string
    (save-excursion
      (let ((col (current-column)))
        (forward-line -1)
        (end-of-line)
        (when (< col (current-column))
          (beginning-of-line)
          (forward-char col)))
      (let ((old-point (point)))
        (- (progn (end-of-line) (point)) old-point)))
    char)))


(provide 'underline-with-char)
#+end_src

*** Last line
:PROPERTIES:
:ID:       d37f9d32-541b-4a08-815e-394d858586d6
:END:
#+begin_src emacs-lisp


;;; underline-with-char.el ends here
#+end_src
